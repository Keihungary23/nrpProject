はい、その通りです 👍

`fitz (PyMuPDF)` を使って **PDFにキーワードのハイライトを入れる処理はサーバーサイドで実行**されます。

流れを整理すると：

---

## 📌 サーバーサイド処理の流れ

1. ユーザーが **PDFをアップロード**（フロント → サーバーへ送信）
2. サーバー側で `fitz` を使って **テキスト検索 + ハイライト追加**

   ```python
   text_instances = page.search_for(keyword)  # キーワードの位置を探す
   page.add_highlight_annot(inst)             # ハイライトを追加
   ```
3. ハイライト済みの PDF を一時ファイルとして保存
4. その PDF を **フロントに返す**（ダウンロード or 埋め込み表示）

---

## 📌 クライアント側に返す方法の選択肢

* **ダウンロードリンク方式**（一番シンプルで安定）
  → ユーザーがクリックすると修正版 PDF が落ちてくる

* **PDF埋め込み表示**（Streamlit / Gradio / Reactなどで可能）
  → `<embed>` タグを使えばブラウザ内で閲覧できる

  ```html
  <embed src="highlighted.pdf" width="100%" height="600px" type="application/pdf">
  ```

---

## ✅ 結論

* **マーカー処理はサーバーサイドで実行**
* **結果PDFを返すときに、ダウンロード or 埋め込み表示**を選べる

---

👉 質問です：
あなたが作りたいWebアプリは **ユーザーがブラウザ上で直接ハイライト付きPDFを閲覧できる**感じにしたいですか？
それとも **ダウンロードして開く方式**の方が良いですか？
